"""The help guide."""

def display_help(topic):
    """Display a help guide.
    
    Arguments:
    topic -- the topic to fetch
    """
    if topic is None:
        print("Welcome to the BarbeMCR's The Betrothed Launcher guide!")
        print("If this is your first time using the interactive launcher, type 'help intro' for a step-by-step tutorial.")
        print("If you want to know more about a command, type 'help <command>'.")
        print()
        print("Commands:")
        print("list               List all installations.")
        print("play               Start an installation and quit.")
        print("install            Install a specific version.")
        print("download           Download a specific version.")
        print("extract            Unzip a previously downloaded version.")
        print("update             Update an installation.")
        print("uninstall          Uninstall an installation.")
        print("rename             Rename an installation.")
        print("duplicate          Duplicate an installation.")
        print("default            Set an installation as default.")
        print("transfer           Copy savefiles between installations.")
        print("sync               Copy savefiles to all installations.")
        print("clean              Delete all savefiles from an installation.")
        print("reset              Delete all savefiles in all installations.")
        print("modernize          Add information to pre-0.20 installations.")
        print("unmodernize        Remove information from pre-0.20 installations.")
        print("help               Get help.")
        print("help intro         Take a tutorial.")
        print("exit               Quit.")
        print()
    elif topic == 'list':
        print("Command 'list'.")
        print()
        print("Usage:")
        print("list")
        print("list used")
        print("list new")
        print()
        print("List all installations.")
        print("If an argument is given, it must be 'used' or 'new'.")
        print("'list used' lists only installations with at least one savefile.")
        print("'list new' lists only installations without savefiles.")
        print()
    elif topic == 'play':
        print("Command 'play'.")
        print()
        print("Usage:")
        print("play")
        print("play <installation>")
        print()
        print("Start an installation and quit the launcher.")
        print("<installation> must be a valid installation name.")
        print("If <installation> is not given, the default installation will be started.")
        print("Note: the launcher will be closed even if the game crashes on startup.")
        print()
    elif topic == 'install':
        print("Command 'install'.")
        print()
        print("Usage:")
        print("install latest")
        print("install <version>")
        print("install latest <target>")
        print("install <version> <target>")
        print()
        print("Create a new installation by downloading and installing a version.")
        print("<version> must be a valid version tag.")
        print("For example, it is valid to type 'install 0.20'.")
        print("If 'latest' is used instead of <version>, the latest version will be installed.")
        print("If provided, <target> must be a valid directory name without spaces.")
        print("The installation will have that name.")
        print("For example, it is valid to type 'install 0.20 main'.")
        print()
    elif topic == 'download':
        print("Command 'download'.")
        print()
        print("Usage:")
        print("download latest")
        print("download <version>")
        print()
        print("Download a version in .zip format.")
        print("<version> must be a valid version tag.")
        print("For example, it is valid to type 'download 0.20'.")
        print("If 'latest' is used instead of <version>, the latest version will be downloaded.")
        print("The .zip will be placed in the directory where the launcher is located.")
        print()
    elif topic == 'extract':
        print("Command 'extract'.")
        print()
        print("Usage:")
        print("extract <file> <name>")
        print()
        print("Extract a .zip version file and create a new installation for it.")
        print("<file> must be a valid .zip file path.")
        print("For example, it is valid to type 'extract the_betrothed_020_py311.zip'.")
        print("<name> must be a valid directory name without spaces.")
        print("The installation will have that name.")
        print("You will be asked whether to remove the file or not.")
        print()
    elif topic == 'update':
        print("Command 'update'.")
        print()
        print("Usage:")
        print("update <installation>")
        print("update <installation> <version>")
        print()
        print("Update an installation.")
        print("<installation> must be a valid installation name.")
        print("If provided, <version> must be a valid version tag.")
        print("For example, it is valid to type 'update main 0.20'.")
        print("If <version> is not given or 'latest' is used,")
        print("the installation will be updated to the latest version.")
        print("Note: updating is not destructive. This means that there might be extra files in updated installations.")
        print()
    elif topic == 'uninstall':
        print("Command 'uninstall'.")
        print()
        print("Usage:")
        print("uninstall <installation>")
        print()
        print("Delete an installation completely.")
        print("<installation> must be a valid installation name.")
        print("All data, including settings and savefiles will be deleted.")
        print()
    elif topic == 'rename':
        print("Command 'rename'.")
        print()
        print("Usage:")
        print("rename <installation> <name>")
        print()
        print("Rename an installation.")
        print("<installation> must be a valid installation name.")
        print("<name> must be a valid directory name without spaces.")
        print("The installation will have that name.")
        print()
    elif topic == 'duplicate':
        print("Command 'duplicate'.")
        print()
        print("Usage:")
        print("duplicate <installation> <target>")
        print()
        print("Create a complete copy of an installation.")
        print("<installation> must be a valid installation name.")
        print("<target> must be a valid directory name without spaces.")
        print("The duplicated installation will have that name.")
        print("All savefiles will be copied.")
        print()
    elif topic == 'default':
        print("Command 'default'.")
        print()
        print("Usage:")
        print("default <installation>")
        print()
        print("Set an installation as default.")
        print("<installation> must be a valid installation name.")
        print()
    elif topic == 'transfer':
        print("Command 'transfer'.")
        print()
        print("Usage:")
        print("transfer <installation> <target>")
        print("transfer <installation> <target> silent")
        print()
        print("Copy all the savefiles from an installation to another.")
        print("<installation> and <target> must be valid installation names.")
        print("By default, when an existing file is encountered, you will be asked whether to overwrite it.")
        print("For a standard existing savefile, you will be asked 4 times in total.")
        print("If you want the launcher to automatically overwrite existing files, you can type 'silent' after <installation> and <target>.")
        print()
    elif topic == 'sync':
        print("Command 'sync'.")
        print()
        print("Usage:")
        print("sync <installation>")
        print("sync <installation> silent")
        print()
        print("Copy all the savefiles from an installation to all the others.")
        print("<installation> must be a valid installation name.")
        print("By default, when an existing file is encountered, you will be asked whether to overwrite it.")
        print("For a standard existing savefile, you will be asked 4 times in total for each installation it is found in.")
        print("If you want the launcher to automatically overwrite existing files, you can type 'silent' after <installation>.")
        print()
    elif topic == 'clean':
        print("Command 'clean'.")
        print()
        print("Usage:")
        print("clean <installation>")
        print()
        print("Delete all the savefiles from an installation.")
        print("<installation> must be a valid installation name.")
        print()
    elif topic == 'reset':
        print("Command 'reset'.")
        print()
        print("Usage:")
        print("reset")
        print()
        print("Delete all the savefiles from all installations.")
        print()
    elif topic == 'modernize':
        print("Command 'modernize'.")
        print()
        print("Usage:")
        print("modernize <installation> <version>")
        print()
        print("Add version information to old (pre-0.20) installations.")
        print("<installation> must be a valid installation name.")
        print("<version> must be a version name without spaces.")
        print("The installation must not have a '.version' file.")
        print("Will fail if used on already modernized installations.")
        print()
    elif topic == 'unmodernize':
        print("Command 'unmodernize'.")
        print()
        print("Usage:")
        print("unmodernize <installation>")
        print()
        print("Remove version information from old (pre-0.20) installations.")
        print("<installation> must be a valid installations name.")
        print("Should be used when updating an old installation to a pre-0.20 version.")
        print("The installation must have a '.version' file.")
        print("Will fail if used on post-0.20 installations.")
    elif topic == 'help':
        print("Command 'help'.")
        print()
        print("Usage:")
        print("help <command>")
        print()
        print("Get help about <command>.")
        print("<command> must be a valid command.")
        print()
    elif topic == 'exit':
        print("Command 'exit'.")
        print()
        print("Usage:")
        print("exit")
        print()
        print("Quit the interactive launcher session.")
        print("This command does not take any arguments.")
        print()
    elif topic == 'intro':
        print("Welcome to the BarbeMCR's The Betrothed Launcher tutorial.")
        print("This is a short step-by-step guide on how to use this launcher")
        print("for managing your BarbeMCR's The Betrothed installations.")
        print()
        print("--Creating your first installation--")
        print("To create an installation with the latest version of BarbeMCR's The Betrothed,")
        print("type 'install latest' in the interactive prompt.")
        print("Otherwise, if you want to install a specific version, type 'install <version>'.")
        print("The launcher will do everything for you.")
        input("Hit return for more...")
        print()
        print("--Starting a game session--")
        print("Once the launcher finishes installing, you might want to start the game.")
        print("To do so, type 'play'. This will start the default installation.")
        print("If you want to start a specific installation, type 'play <installation>'.")
        print("Please do note that 'play' and 'play <installation>' close the launcher automatically.")
        print("You can change the default installation by typing 'default <installation>'.")
        print("The default installations gets checked for updates when the launcher starts up.")
        input("Hit return for more...")
        print()
        print("--Managing installations--")
        print("Until now, we haven't talked about the main feature of BarbeMCR's The Betrothed Launcher.")
        print("This program is mainly an installation manager, after all.")
        print("To list all the BarbeMCR's The Betrothed installations, type 'list'.")
        print("To list only installations with savefiles, type 'list used'.")
        print("To list only installations without savefiles, type 'list new'.")
        print("To create a new installation, type 'install <version> [<target>]'.")
        print("To just download the .zip for your target version, without installing, type 'download <version>'.")
        print("To unzip a previously downloaded .zip, type 'extract <file> [<name>]'.")
        print("To remove an installation, type 'uninstall <installation>'.")
        print("To rename an installation, type 'rename <installation> <name>'.")
        print("To create a complete copy of an installation, type 'duplicate <installation> <target>'.")
        print("If you have an old (pre-0.20) installation and you want to add version information to it,")
        print("type 'modernize <installation> <version>'.")
        print("Note: if it wasn't clear, you aren't limited to one installation per version.")
        input("Hit return for more...")
        print()
        print("--Updating installations--")
        print("What if a new version gets released? Do you need to manually update it?")
        print("Well, you can update it manually if you want to.")
        print("However, the launcher has a built-in update feature to help you out.")
        print("The easiest way to update is to type 'update <installation>'.")
        print("Updating keeps intact all your savefiles.")
        print("That means the first time you want to play one of your old savefiles,")
        print("you may have to upgrade it in-game (it's automatic, though).")
        print("Please do note that your settings will be lost and you will need to change them back.")
        print("You can also upgrade to a specific version.")
        print("Just type 'update <installation> <version>'.")
        print("Note: typing 'update <installation>' or 'update <installation> latest' does the same thing.")
        print("Side-note: 'update <installation> <version>' also allows downgrading versions.")
        print("Keep in mind that downgrading is not officially supported, though.")
        input("Hit return for more...")
        print()
        print("--Managing savefiles--")
        print("The launcher also provides you with a way of managing savefiles between installations.")
        print("You can't, however, manage single savefiles, as you will see shortly.")
        print("Please manage your savefiles manually if you need that functionality.")
        print("To copy ALL savefiles from an installation to another, type 'transfer <installation> <target>'.")
        print("To copy ALL savefiles from an installation to ALL the others, type 'sync <installation>'.")
        print("Note that the original savefiles in the target installation(s) will be kept.")
        print("To delete ALL savefiles from an installation, type 'clean <installation>'.")
        print("To delete ALL savefiles from ALL installations, type 'reset'.")
        print("Please do note that 'clean <installation>' and 'reset' leave the settings untouched.")
        print("If you need to reset the settings as well, uninstall the installation(s) and install the right version(s) again.")
        input("Hit return for more...")
        print()
        print("--Getting further information--")
        print("If you need help with the syntax of any command, type 'help <command>'.")
        print("For example, to get help with command 'install', type 'help install'.")
        print("If you need a complete list of commands, just type 'help'.")
        print("If you still need help, try consulting the online documentation.")
        print("You can find it in the BarbeMCR's The Betrothed Launcher repository:")
        print("https://github.com/BarbeMCR/the-betrothed-launcher")
        print()
        print("And, if you want to quit the launcher, type 'exit'.")
        print("Note: you can also hit Ctrl-Z and return on Windows and Ctrl-D on *nix.")
        print()
    else:
        print("Invalid help request.")